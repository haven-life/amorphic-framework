"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Change = void 0;
exports.Change = 'change';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJUeXBlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFhYSxRQUFBLE1BQU0sR0FBRyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1N1cGVydHlwZX0gZnJvbSAnQGhhdmVudGVjaC9zdXBlcnR5cGUnO1xuaW1wb3J0IHtSZXF1ZXN0LCBSZXNwb25zZX0gZnJvbSAnZXhwcmVzcyc7XG5leHBvcnQgdHlwZSBIVFRQT2JqcyA9IHtyZXF1ZXN0OiBSZXF1ZXN0LCByZXNwb25zZTogUmVzcG9uc2V9O1xuXG5leHBvcnQgdHlwZSBTdWJzY3JpcHRpb24gPSB7XG4gICAgcm9sZTogc3RyaW5nO1xuICAgIGxvZzoge1xuICAgICAgICBhcnJheTogQXJyYXlHcm91cDtcbiAgICAgICAgYXJyYXlEaXJ0eTogQXJyYXlHcm91cDtcbiAgICAgICAgY2hhbmdlOiBDaGFuZ2VHcm91cDtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBDaGFuZ2UgPSAnY2hhbmdlJztcbmV4cG9ydCB0eXBlIEFycmF5VHlwZXMgPSAnYXJyYXknIHwgJ2FycmF5RGlydHknO1xuZXhwb3J0IHR5cGUgRXJyb3JUeXBlID0gJ2Vycm9yJyB8ICdyZXRyeScgfCAncmVzcG9uc2UnO1xuXG5leHBvcnQgdHlwZSBDYWxsQ29udGV4dCA9IHsgcmV0cmllczogbnVtYmVyOyBzdGFydFRpbWU6IERhdGUgfTtcblxuZXhwb3J0IHR5cGUgUHJvY2Vzc0NhbGxQYXlsb2FkID0ge1xuICAgIHNlbW90dXM6IFNlbW90dXM7XG4gICAgcmVtb3RlQ2FsbDogUmVtb3RlQ2FsbDtcbiAgICBjYWxsQ29udGV4dDogQ2FsbENvbnRleHQ7XG4gICAgc2Vzc2lvbjogU2Vzc2lvbjtcbiAgICBzdWJzY3JpcHRpb25JZDogYW55O1xuICAgIHJlbW90ZUNhbGxJZDogYW55O1xuICAgIHJlc3RvcmVTZXNzaW9uQ2FsbGJhY2s/OiBGdW5jdGlvbjtcbiAgICBIVFRQT2Jqcz86IEhUVFBPYmpzO1xufVxuXG4vKipcbiAqICBpZCBpcyB0aGUgaWQgb2YgdGhlIG9iamVjdCArICcvJyArIHByb3BlcnR5LlxuICogIEV4OiB0aGVyZSBhcmUgMSBTY2hvb2wgdG8gTWFueSBTdHVkZW50c1xuICpcbiAqICBTY2hvb2wge1xuICogICAgICBzdHVkZW50czogQXJyYXk8U3R1ZGVudHM+XG4gKiAgfVxuICpcbiAqICBJbiB0aGlzIGNhc2UsIG9uZSBlbnRyeSB3aXRoaW4gdGhpcyBBcnJheUdyb3VwIG1heSBiZSAnc2VydmVyLVNjaG9vbC0xL3N0dWRlbnRzJzogW1wic2VydmVyLVN0dWRlbnQtM1wiLCBcInNlcnZlci1TdHVkZW50LTVcIl1cbiAqXG4gKiAgSWYgdGhhdCdzIGFsbCB0aGUgY2hhbmdlcyB0aGVuIHRoZSBBcnJheUdyb3VwIHdvdWxkIGJlIHsnc2VydmVyLVNjaG9vbC0xL3N0dWRlbnRzJzogW1wic2VydmVyLVN0dWRlbnQtM1wiLCBcInNlcnZlci1TdHVkZW50LTVcIl19XG4gKi9cbmV4cG9ydCB0eXBlIEFycmF5R3JvdXAgPSB7IFtpZDogc3RyaW5nXTogQXJyYXlDaGFuZ2VzIH07XG5cbi8qKlxuICogQW4gYXJyYXkgb2YgSWQgcmVmZXJlbmNlcyB0byBTdXBlcnR5cGUgT2JqZWN0cyBvciBwcmltaXRpdmUgdmFsdWVzXG4gKi9cbnR5cGUgQXJyYXlDaGFuZ2VzID0gQXJyYXk8YW55PjtcbmV4cG9ydCB0eXBlIENoYW5nZUdyb3VwID0geyBbb2JqSWQ6IHN0cmluZ106IFByb3BDaGFuZ2VzIH07XG50eXBlIFByb3BDaGFuZ2VzID0geyBbcHJvcDogc3RyaW5nXTogQ2hhbmdlcyB9O1xuXG4vLyBDaGFuZ2VzWzBdIGlzIG9sZFZhbHVlLCBDaGFuZ2VzWzFdIGlzIG5ld1ZhbHVlXG50eXBlIG9sZFZhbCA9IGFueTtcbnR5cGUgbmV3VmFsID0gYW55O1xudHlwZSBDaGFuZ2VzID0gW29sZFZhbCwgbmV3VmFsXVtdO1xuXG5leHBvcnQgdHlwZSBTdWJzY3JpcHRpb25zID0geyBba2V5OiBzdHJpbmddOiBTdWJzY3JpcHRpb24gfTtcblxuZXhwb3J0IHR5cGUgUmVtb3RlQ2FsbCA9IHtcbiAgICByZW1vdGVDYWxsSWQ6IGFueTtcbiAgICBpZDogYW55O1xuICAgIGNoYW5nZXM6IHN0cmluZzsgLy8gVGhlIHN0cmluZyBpcyBvZiB0eXBlIENoYW5nZUdyb3VwXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHNlcXVlbmNlOiBhbnk7XG4gICAgdHlwZTogYW55O1xuICAgIHN5bmM6IGFueTtcbiAgICB2YWx1ZTogYW55O1xufVxuXG5leHBvcnQgdHlwZSBTZXNzaW9uID0ge1xuICAgIHN1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbnM7XG4gICAgc2VuZE1lc3NhZ2U6IFNlbmRNZXNzYWdlO1xuICAgIHNlbmRNZXNzYWdlRW5hYmxlZDogYm9vbGVhbjtcbiAgICByZW1vdGVDYWxsczogQXJyYXk8YW55PjtcbiAgICBwZW5kaW5nUmVtb3RlQ2FsbHM6IGFueTtcbiAgICBuZXh0UGVuZGluZ1JlbW90ZUNhbGxJZDogbnVtYmVyO1xuICAgIG5leHRTYXZlU2Vzc2lvbklkOiBudW1iZXI7XG4gICAgc2F2ZWRTZXNzaW9uSWQ6IG51bWJlcjtcbiAgICBuZXh0U3Vic2NyaXB0aW9uSWQ6IG51bWJlcjtcbiAgICBvYmplY3RzOiBhbnk7XG4gICAgbmV4dE9iaklkOiBudW1iZXI7XG4gICAgZGlzcGVuc2VOZXh0SWQ6IG51bGw7IC8vIG5vdCB1c2VkIGFueXdoZXJlXG59XG5cblxuZXhwb3J0IHR5cGUgU2Vzc2lvbnMgPSB7IFtzZXNzaW9uSWQ6IG51bWJlcl06IFNlc3Npb24gfTtcblxuZXhwb3J0IHR5cGUgU2VuZE1lc3NhZ2UgPSAobWVzc2FnZTogYW55KSA9PiB2b2lkO1xuXG5leHBvcnQgdHlwZSBTYXZlZFNlc3Npb24gPSB7XG4gICAgcmV2aXNpb246IG51bWJlcjtcbiAgICBkYXRhOiBzdHJpbmc7IC8vIFNlcmlhbGl6ZWQgU2Vzc2lvbiBkYXRhXG4gICAgY2FsbENvdW50OiBudW1iZXI7XG4gICAgcmVmZXJlbmNlZDogbnVtYmVyO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBSZW1vdGVhYmxlQ2xhc3MgZXh0ZW5kcyBTdXBlcnR5cGUge1xuICAgIHN5bmNTdGF0ZXM6IEFycmF5PHN0cmluZz47XG4gICAgX190b0NsaWVudF9fOiBib29sZWFuO1xuICAgIF9fdG9TZXJ2ZXJfXzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IHR5cGUgQ2hhbmdlU3RyaW5nID0geyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcbnR5cGUgUHJlU2VydmVyQ2FsbENoYW5nZXMgPSB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfTtcblxuZXhwb3J0IHR5cGUgQ29udHJvbGxlclN5bmNTdGF0ZSA9IHtcbiAgICBzY29wZTogJysnIHwgJyonIHwgJy0nXG4gICAgc3RhdGU6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElTZW1vdHVzQ29udHJvbGxlciB7XG4gICAgX190ZW1wbGF0ZV9fOiBhbnk7XG4gICAgc3luY1N0YXRlPzogQ29udHJvbGxlclN5bmNTdGF0ZVxuXG4gICAgLyoqXG4gICAgICogQHNlcnZlclxuICAgICAqXG4gICAgICogQ2FsbGJhY2sgYWZ0ZXIgYSBzdWNjZXNzZnVsIHJlbW90ZSBmdW5jdGlvbiBjYWxsIChqdXN0IHRoZSBhcHBsaWNhdGlvbiBvZiBjaGFuZ2VzIGFuZCB0aGUgZXhlY3V0aW9uIG9mIHRoZSBmdW5jdGlvbiBjYWxsKVxuICAgICAqIE5vdGUgdGhhdCB0aGlzIGRvZXNuJ3QgbWVhbiB3ZSBjYW4ndCBlcnJvciBvdXQgb24gdGhpcyBvciBzdWJzZXF1ZW50IHN0ZXBzIG9mIGEgcmVtb3RlIGNhbGwuXG4gICAgICpcbiAgICAgKiBXZSBjYW4gdXRpbGl6ZSB0aGlzIGZ1bmN0aW9uIGFzIGEgZ2VuZXJpYyBmdW5jdGlvbiBoYW5kbGVyIHRvIHJ1biBhZnRlciB3ZSBoYXZlIHN1Y2Nlc3NmdWxseSBjYWxsZWQgYSByZW1vdGUgZnVuY3Rpb24uXG4gICAgICogT25lIHN1Y2ggdXNlIG1heSBiZSB0byBzZWUgdGhlIGNoYW5nZXMgdGhhdCB3ZXJlIGFwcGxpZWQgZnJvbSB0aGUgY2xpZW50XG4gICAgICpcbiAgICAgKiBOT1RFIFRIQVQgVEhFIENIQU5HRVNUUklORyBET0VTIE5PVCBJTkNMVURFIENIQU5HRVMgRE9ORSBXSVRISU4gVEhFIFJFTU9URSBGVU5DVElPTiBDQUxMIElUU0VMRiwgT05MWSBDSEFOR0VTIEZST00gVEhFIENMSUVOVFxuICAgICAqXG4gICAgICogU2VlIHJlbW90ZSBjYWxsIGRvY3VtZW50YXRpb24gdG8ga25vdyB3aGVyZSB0aGlzIGV4ZWN1dGVzIGluIHRoZSBsaWZlY3ljbGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaGFzQ2hhbmdlcyAtIFdoZXRoZXIgb3Igbm90IHdlIGhhdmUgYXBwbGllZCBjbGllbnQgY2hhbmdlcyBvbnRvIHRoZSBzZXJ2ZXIncyBvYmplY3QgZ3JhcGhcbiAgICAgKiBAcGFyYW0ge0NhbGxDb250ZXh0fSBjYWxsQ29udGV4dCAtIENvbnRleHQgKG51bWJlciBvZiByZXRyaWVzIGV0YylcbiAgICAgKiBAcGFyYW0ge2NoYW5nZVN0cmluZ30gY2hhbmdlU3RyaW5nIC0gT2JqZWN0IG9mIENoYW5nZXMgLSBLZXkgaXMgW0NsYXNzTmFtZV0uW3Byb3BlcnR5TmFtZV0sIFZhbHVlIGlzIFtjaGFuZ2VkVmFsdWVdIGV4YW1wbGU6IHsnQ3VzdG9tZXIubWlkZGxlbmFtZSc6ICdLYXJlbid9LCBTZWUgYWJvdmUgbm90ZVxuICAgICAqIEBwYXJhbSBIVFRQT2Jqc1xuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAgICogQG1lbWJlcm9mIENvbnRyb2xsZXJcbiAgICAgKi9cbiAgICBwb3N0U2VydmVyQ2FsbD8oaGFzQ2hhbmdlczogYm9vbGVhbiwgY2FsbENvbnRleHQ6IENhbGxDb250ZXh0LCBjaGFuZ2VTdHJpbmc6IENoYW5nZVN0cmluZywgSFRUUE9ianM/OiBIVFRQT2Jqcyk6IFByb21pc2U8YW55PjtcblxuICAgIC8qKlxuICAgICAqIEBzZXJ2ZXJcbiAgICAgKlxuICAgICAqIENhbGxiYWNrIHRvIGhhbmRsZSBlcnJvcnMgb24gYSByZW1vdGUgY2FsbC5cbiAgICAgKlxuICAgICAqIEV4ZWN1dGVzIGFmdGVyIGV2ZXJ5IG90aGVyIHN0ZXAgaW4gdGhlIHJlbW90ZSBjYWxsIHBpcGVsaW5lIChzZWUgcmVtb3RlIGNhbGwgZG9jdW1lbnRhdGlvbilcbiAgICAgKiBidXQgYmVmb3JlIHJldHJ5aW5nIHRoZSBjYWxsIChvciBwYWNrYWdpbmcgcmVzcG9uc2UgYW5kIHNlbmRpbmcgYmFjayB0byBjbGllbnQpXG4gICAgICpcbiAgICAgKiBOT1RFIFRIQVQgVEhFIENIQU5HRVNUUklORyBET0VTIE5PVCBJTkNMVURFIENIQU5HRVMgRE9ORSBXSVRISU4gVEhFIFJFTU9URSBGVU5DVElPTiBDQUxMIElUU0VMRiwgT05MWSBDSEFOR0VTIEZST00gVEhFIENMSUVOVFxuICAgICAqXG4gICAgICogQHBhcmFtIHtFcnJvclR5cGV9IGVycm9yVHlwZSAtIEVycm9yIHR5cGUgYXNzb2NpYXRlZCAoZXJyb3IsIHJldHJ5LCByZXNwb25zZSlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcmVtb3RlQ2FsbElkIC0gSWQgZm9yIHJlbW90ZSBjYWxsXG4gICAgICogQHBhcmFtIHtleHRlbmRzIFN1cGVydHlwZX0gcmVtb3RlT2JqIC0gSW5zdGFuY2UgZm9yIHdoaWNoIHRoZSByZW1vdGUgb2JqZWN0IGZ1bmN0aW9uIGlzIGNhbGxlZCBmb3IgLSBAVE9ETzogcmV2aXNpdCB3aGVuIHdlIGNyZWF0ZSBhIHByb3BlciByZW1vdGVhYmxlIHR5cGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZnVuY3Rpb25OYW1lIC0gTmFtZSBvZiBmdW5jdGlvbiBiZWluZyBjYWxsZWRcbiAgICAgKiBAcGFyYW0ge0NhbGxDb250ZXh0fSBjYWxsQ29udGV4dCAtIENvbnRleHQgKG51bWJlciBvZiByZXRyaWVzIGV0YylcbiAgICAgKiBAcGFyYW0ge0NoYW5nZVN0cmluZ30gY2hhbmdlU3RyaW5nIC0gT2JqZWN0IG9mIENoYW5nZXMgLSBLZXkgaXMgW0NsYXNzTmFtZV0uW3Byb3BlcnR5TmFtZV0sIFZhbHVlIGlzIFtjaGFuZ2VkVmFsdWVdIGV4YW1wbGU6IHsnQ3VzdG9tZXIubWlkZGxlbmFtZSc6ICdLYXJlbid9LCBTZWUgYWJvdmUgbm90ZVxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAgICogQG1lbWJlcm9mIENvbnRyb2xsZXJcbiAgICAgKi9cbiAgICBwb3N0U2VydmVyRXJyb3JIYW5kbGVyPyhlcnJvclR5cGU6IEVycm9yVHlwZSwgcmVtb3RlQ2FsbElkOiBudW1iZXIsIHJlbW90ZU9iajogU3VwZXJ0eXBlLCBmdW5jdGlvbk5hbWU6IHN0cmluZywgY2FsbENvbnRleHQ6IENhbGxDb250ZXh0LCBjaGFuZ2VTdHJpbmc6IENoYW5nZVN0cmluZyk6IFByb21pc2U8dm9pZD47XG5cbiAgICAvKipcbiAgICAgKiBAc2VydmVyXG4gICAgICpcbiAgICAgKiBDYWxsYmFjayBiZWZvcmUgYSByZW1vdGUgZnVuY3Rpb24gY2FsbCAoMXN0IHN0ZXAgb2YgYSByZW1vdGUgY2FsbClcbiAgICAgKlxuICAgICAqIFdlIGNhbiB1dGlsaXplIHRoaXMgZnVuY3Rpb24gYXMgYSBnZW5lcmljIGZ1bmN0aW9uIGhhbmRsZXIgdG8gcnVuIGJlZm9yZSB3ZSBjYWxsIGFcbiAgICAgKiByZW1vdGUgZnVuY3Rpb24gb3IgYmVmb3JlIHdlIGFwcGx5IGNoYW5nZXMgZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXJcbiAgICAgKlxuICAgICAqIFdlIGNhbiBhbHNvIHV0aWxpemUgdGhpcyBmdW5jdGlvbiB0byBkbyBhbnkgY29udGV4dC1zcGVjaWZpYyBwcmVwIHdvcmsgLyBsb2FkaW5nXG4gICAgICogaWYgdGhpcyBhIHN1YnNlcXVlbnQgdHJ5IG9mIHRoaXMgZnVuY3Rpb24gZHVlIHRvIGFuIHVwZGF0ZSBjb25mbGljdC5cbiAgICAgKlxuICAgICAqIFNlZSByZW1vdGUgY2FsbCBkb2N1bWVudGF0aW9uIHRvIGtub3cgd2hlcmUgdGhpcyBleGVjdXRlcyBpbiB0aGUgbGlmZWN5Y2xlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGhhc0NoYW5nZXMgLSBXaGV0aGVyIG9yIG5vdCB3ZSBoYXZlIGFwcGxpZWQgY2xpZW50IGNoYW5nZXMgb250byB0aGUgc2VydmVyJ3Mgb2JqZWN0IGdyYXBoXG4gICAgICogQHBhcmFtIHtQcmVTZXJ2ZXJDYWxsQ2hhbmdlc30gY2hhbmdlcyAtIERpY3Rpb25hcnkgb2YgT2JqZWN0cyB0aGF0IGhhdmUgYmVlbiBjaGFuZ2VkIGZyb20gdGhlIGNsaWVudFxuICAgICAqIEBwYXJhbSB7Q2FsbENvbnRleHR9IGNhbGxDb250ZXh0IC0gQ29udGV4dCAobnVtYmVyIG9mIHJldHJpZXMgZXRjKVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2ZvcmNlVXBkYXRlXSAtIE9wdGlvbmFsIHBhcmFtZXRlciBwYXNzZWQgaW4uIFRydWUgaWYgdGhpcyBpcyBhIHJldHJ5IG9mIHRoZSBjYWxsIGJhc2VkIG9uIGFuIHVwZGF0ZSBjb25mbGljdC4gRmFsc2UgLyB1bmRlZmluZWQgb3RoZXJ3aXNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGZ1bmN0aW9uTmFtZVxuICAgICAqIEBwYXJhbSByZW1vdGVDYWxsXG4gICAgICogQHBhcmFtIGlzUHVibGljXG4gICAgICogQHBhcmFtIEhUVFBPYmpzXG4gICAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAgICogQG1lbWJlcm9mIENvbnRyb2xsZXJcbiAgICAgKi9cbiAgICBwcmVTZXJ2ZXJDYWxsPyhoYXNDaGFuZ2VzOiBib29sZWFuLCBjaGFuZ2VzOiBQcmVTZXJ2ZXJDYWxsQ2hhbmdlcywgY2FsbENvbnRleHQ6IENhbGxDb250ZXh0LCBmb3JjZVVwZGF0ZTogdW5kZWZpbmVkIHwgYm9vbGVhbiwgZnVuY3Rpb25OYW1lOiBzdHJpbmcsIHJlbW90ZUNhbGw6IFJlbW90ZUNhbGwsIGlzUHVibGljOiBib29sZWFuLCBIVFRQT2Jqcz86IEhUVFBPYmpzICk6IFByb21pc2U8YW55PjtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgYSBoYW5kbGVyIHRoYXQgd2lsbCBvbmx5IGJlIHVzZWQgZm9yIHRlc3RpbmcgYW5kIGRlYnVnZ2luZyBwdXJwb3Nlc1xuICAgICAqXG4gICAgICogV2hlbiB0aGlzIGlzIHVzZWQsIGFsbG93cyB1cyB0byBpbnNwZWN0IHRoZSBtZXNzYWdlIGJvZHkgYmVmb3JlIHdlIHNlbmQgaXQgb3V0IGluICdwYWNrYWdlQ2hhbmdlcydcbiAgICAgKlxuICAgICAqIERPIE5PVCBVU0UgVEhJUyBJTiBQUk9EVUNUSU9OIENPREVcbiAgICAgKlxuICAgICAqIEBwYXJhbSBtZXNzYWdlXG4gICAgICovXG4gICAgaW5zcGVjdE1lc3NhZ2U/KG1lc3NhZ2UpOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2Vtb3R1cyB7XG4gICAgc2V0U3luY1N0YXRlOiAoc3RyKSA9PiB2b2lkO1xuICAgIHN5bmNTdGF0ZTogc3RyaW5nO1xuICAgIGdldFN5bmNTdGF0ZTogKCkgPT4gYW55O1xuICAgIG1heENhbGxUaW1lOiBudW1iZXI7XG4gICAgX19kaWN0aW9uYXJ5X186IGFueTtcbiAgICBtZW1TZXNzaW9uOiB7IHNlbW90dXM6IHsgY2FsbFN0YXJ0VGltZTogbnVtYmVyIH0gfTtcbiAgICBfaW5qZWN0SW50b1RlbXBsYXRlOiAodGVtcGxhdGUpID0+IHZvaWQ7XG4gICAgc2VyaWFsaXplQW5kR2FyYmFnZUNvbGxlY3Q6ICgpID0+IGFueTtcbiAgICBnZXRNZXNzYWdlOiAoc2Vzc2lvbklkLCBmb3JjZU1lc3NhZ2UpID0+IGFueTtcbiAgICBjbGVhclBlbmRpbmdDYWxsczogKHNlc3Npb25JZCkgPT4gdm9pZDtcbiAgICBnZXRDaGFuZ2VHcm91cDogKHR5cGUsIHN1YnNjcmlwdGlvbklkKSA9PiBDaGFuZ2VHcm91cDtcbiAgICBkZWxldGVDaGFuZ2VHcm91cDogKHR5cGU6IGFueSwgc3Vic2NyaXB0aW9uSWQ6IGFueSkgPT4gdm9pZDtcbiAgICBnZXRDaGFuZ2VTdGF0dXM6ICgpID0+IHN0cmluZztcbiAgICBfc3Rhc2hPYmplY3Q6IChvYmosIHRlbXBsYXRlKSA9PiBib29sZWFuO1xuICAgIHNlc3Npb25pemU6IChvYmosIHJlZmVyZW5jaW5nT2JqKSA9PiAodW5kZWZpbmVkIHwgYW55KTtcbiAgICBfc2V0dXBGdW5jdGlvbjogKHByb3BlcnR5TmFtZSwgcHJvcGVydHlWYWx1ZSwgcm9sZSwgdmFsaWRhdGUsIHNlcnZlclZhbGlkYXRpb24sIGlzUHVibGljOiBib29sZWFuLCB0ZW1wbGF0ZSkgPT4gKGFueSk7XG4gICAgX3NldHVwUHJvcGVydHk6IChwcm9wZXJ0eU5hbWUsIGRlZmluZVByb3BlcnR5LCBvYmplY3RQcm9wZXJ0aWVzLCBkZWZpbmVQcm9wZXJ0aWVzKSA9PiB2b2lkO1xuICAgIHdpdGhvdXRDaGFuZ2VUcmFja2luZzogKGNiKSA9PiB2b2lkO1xuICAgIF9jaGFuZ2VkVmFsdWU6IChvYmosIHByb3AsIHZhbHVlKSA9PiB2b2lkO1xuICAgIF9yZWZlcmVuY2VkQXJyYXk6IChvYmosIHByb3AsIGFycmF5UmVmLCBzZXNzaW9uSWQ/KSA9PiB2b2lkO1xuICAgIF9jb252ZXJ0QXJyYXlSZWZlcmVuY2VzVG9DaGFuZ2VzOiAoKSA9PiB2b2lkO1xuICAgIE1hcmtDaGFuZ2VkQXJyYXlSZWZlcmVuY2VzOiAoKSA9PiB2b2lkO1xuICAgIF9jb252ZXJ0VmFsdWU6ICh2YWx1ZSkgPT4gKGFueVtdIHwgbnVsbCk7XG4gICAgZ2V0T2JqZWN0OiAob2JqSWQsIHRlbXBsYXRlKSA9PiAoYW55IHwgbnVsbCk7XG4gICAgX2FwcGx5Q2hhbmdlczogKGNoYW5nZXMsIGZvcmNlLCBzdWJzY3JpcHRpb25JZCwgY2FsbENvbnRleHQpID0+IChudW1iZXIpO1xuICAgIF9hcHBseU9iamVjdENoYW5nZXM6IChjaGFuZ2VzLCByb2xsYmFjaywgb2JqLCBmb3JjZSkgPT4gKGJvb2xlYW4pO1xuICAgIF92YWxpZGF0ZVNlcnZlckluY29taW5nUHJvcGVydHk6IChvYmosIHByb3AsIGRlZmluZVByb3BlcnR5LCBuZXdWYWx1ZSkgPT4gKGJvb2xlYW4pO1xuICAgIF9hcHBseVByb3BlcnR5Q2hhbmdlOiAoY2hhbmdlcywgcm9sbGJhY2ssIG9iaiwgcHJvcCwgaXgsIG9sZFZhbHVlLCBuZXdWYWx1ZSwgZm9yY2UpID0+IChib29sZWFuKTtcbiAgICBfcm9sbGJhY2s6IChyb2xsYmFjaykgPT4gdm9pZDtcbiAgICBfcm9sbGJhY2tDaGFuZ2VzOiAoKSA9PiB2b2lkO1xuICAgIF9jcmVhdGVFbXB0eU9iamVjdDogKHRlbXBsYXRlLCBvYmpJZCwgZGVmaW5lUHJvcGVydHksIGlzVHJhbnNpZW50KSA9PiBhbnk7XG4gICAgaW5qZWN0OiAodGVtcGxhdGUsIGluamVjdG9yKSA9PiB2b2lkO1xuICAgIF9xdWV1ZVJlbW90ZUNhbGw6IChvYmpJZCwgZnVuY3Rpb25OYW1lLCBkZWZlcnJlZCwgYXJncykgPT4gdm9pZDtcbiAgICBfcHJvY2Vzc1F1ZXVlOiAoKSA9PiB2b2lkO1xuICAgIF90b1RyYW5zcG9ydDogKG9iaikgPT4gYW55O1xuICAgIF9mcm9tVHJhbnNwb3J0OiAob2JqKSA9PiBhbnk7XG4gICAgX2V4dHJhY3RBcmd1bWVudHM6IChyZW1vdGVDYWxsKSA9PiBhbnk7XG4gICAgX3RyaW1BcnJheTogKGFycmF5KSA9PiB2b2lkO1xuICAgIF9kZWxldGVDaGFuZ2VHcm91cHM6ICh0eXBlKSA9PiB2b2lkO1xuICAgIF9nZXRTdWJzY3JpcHRpb25zOiAoc2Vzc2lvbklkPykgPT4gU3Vic2NyaXB0aW9ucyB8IG51bGw7XG4gICAgX2dldFN1YnNjcmlwdGlvbjogKHN1YnNjcmlwdGlvbklkPykgPT4gU3Vic2NyaXB0aW9uO1xuICAgIGNsZWFuUHJpdmF0ZVZhbHVlczogKHByb3AsIGxvZ1ZhbHVlLCBkZWZpbmVQcm9wZXJ0eSkgPT4gKHN0cmluZyB8IGFueSk7XG4gICAgUmVtb3RlYWJsZTogKEJhc2UpID0+ICgpID0+IGFueTtcbiAgICBCaW5kYWJsZTogKEJhc2UpID0+ICgpID0+IGFueTtcbiAgICBQZXJzaXN0YWJsZTogKEJhc2UpID0+ICgpID0+IGFueTtcbiAgICBiaW5kRGVjb3JhdG9yczogKG9iamVjdFRlbXBsYXRlPykgPT4gdm9pZDtcbiAgICBwcm9jZXNzTWVzc2FnZTogKHJlbW90ZUNhbGwsIHN1YnNjcmlwdGlvbklkLCByZXN0b3JlU2Vzc2lvbkNhbGxiYWNrLCByZXE/OiBSZXF1ZXN0LCByZXM/OiBSZXNwb25zZSkgPT4gKHVuZGVmaW5lZCB8IGFueSk7XG4gICAgZW5hYmxlU2VuZE1lc3NhZ2U6ICh2YWx1ZSwgbWVzc2FnZUNhbGxiYWNrLCBzZXNzaW9uSWQpID0+IHZvaWQ7XG4gICAgc3luY1Nlc3Npb246IChzZXNzaW9uSWQpID0+IHZvaWQ7XG4gICAgcmVzdG9yZVNlc3Npb246IChzZXNzaW9uSWQsIHNhdmVkU2Vzc2lvbjogU2F2ZWRTZXNzaW9uLCBzZW5kTWVzc2FnZTogU2VuZE1lc3NhZ2UpID0+IGJvb2xlYW47XG4gICAgc2F2ZVNlc3Npb246IChzZXNzaW9uSWQpID0+IFNhdmVkU2Vzc2lvbjtcbiAgICBzZXRNaW5pbXVtU2VxdWVuY2U6IChuZXh0T2JqSWQpID0+IHZvaWQ7XG4gICAgZGVsZXRlU2Vzc2lvbjogKHNlc3Npb25JZCkgPT4gdm9pZDtcbiAgICBjcmVhdGVTZXNzaW9uOiAocm9sZTogYW55LCBzZW5kTWVzc2FnZTogU2VuZE1lc3NhZ2UsIHNlc3Npb25JZDogYW55KSA9PiBhbnk7XG4gICAgbG9nOiAobGV2ZWwsIGRhdGEpID0+IHZvaWQ7XG4gICAgbmV4dE9iaklkOiBudW1iZXI7XG4gICAgbWF4Q2xpZW50U2VxdWVuY2U6IG51bWJlcjtcbiAgICBsb2dMZXZlbDogbnVtYmVyO1xuICAgIF9fY29uZmxpY3RNb2RlX186IHN0cmluZztcbiAgICBfX2NoYW5nZVRyYWNraW5nX186IGJvb2xlYW47XG4gICAgX3VzZUdldHRlcnNTZXR0ZXJzOiBib29sZWFuO1xuICAgIGxvZ2dlcjogYW55O1xuICAgIHJvbGU6IGFueTtcbiAgICBjdXJyZW50U2Vzc2lvbjogYW55O1xuICAgIHNlc3Npb25zPzogU2Vzc2lvbnM7XG4gICAgbmV4dFN1YnNjcmlwdGlvbklkOiBudW1iZXI7XG4gICAgbmV4dFNlc3Npb25JZDogbnVtYmVyO1xuICAgIGNvbnRyb2xsZXI6IElTZW1vdHVzQ29udHJvbGxlcjtcbiAgICBjaGFuZ2VTdHJpbmc6IHN0cmluZztcblxuXG4gICAgX2dldFNlc3Npb24oX3NpZD86IGFueSk6IFNlc3Npb247XG5cbiAgICBzdWJzY3JpYmUocm9sZTogYW55KTogbnVtYmVyO1xuXG4gICAgc2V0U2Vzc2lvbihzZXNzaW9uSWQ6IGFueSk6IHZvaWQ7XG5cbiAgICBnZXRDaGFuZ2VzKHN1YnNjcmlwdGlvbklkPzogYW55KTogQ2hhbmdlR3JvdXA7XG5cbiAgICBfZGVsZXRlQ2hhbmdlcygpOiB2b2lkO1xuXG4gICAgZ2V0UGVuZGluZ0NhbGxDb3VudChzZXNzaW9uSWQ6IGFueSk6IGFueTtcbn1cbiJdfQ==